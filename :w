import type { MetaFunction } from "@remix-run/node";
import { useEffect, useState } from "react";
import Header from "~/components/Header";
import { fetchWebApi } from "~/lib/FetchSpotify";
import { getHash } from "~/lib/getHash";
import AlbumCard from "~/components/AlbumCard";
import LoginButton from "~/components/LoginButton";
import { LikeButton, DislikeButton, PlayButton } from "~/components/Buttons";

export const meta: MetaFunction = () => {
  return [
    { title: "Findify" },
    { name: "description", content: "Discover your next favorite song!" },
  ];
};

export default function Index() {
  const [token, setToken] = useState("");
  const [recommendedSongs, setRecommendedSongs] = useState([
    {
      name: "Loading",
      albumCover:
        "https://clipground.com/images/image-placeholder-clipart-1.png",
      artists: ["Loading"],
    },
    {
      name: "Loading",
      albumCover:
        "https://clipground.com/images/image-placeholder-clipart-1.png",
      artists: ["Loading"],
    },
  ]);

  function swipe() {
    setRecommendedSongs((recommendedSongs) => recommendedSongs.slice(1));
  }

  useEffect(() => {
    setToken(getHash());

    if (token.length < 0) {
      fetchWebApi(
        "v1/me/top/tracks?time_range=short_term&limit=5",
        "GET",
        token
      )
        .then((response) => {
          const songIds = response.items.map((song: any) => {
            return song.id;
          });

          return fetchWebApi(
            `v1/recommendations?limit=100&seed_tracks=${songIds.join(",")}`,
            "GET",
            token
          );
        })

        .then((response) => {
          const tracks = response.tracks.map((song) => {
            return {
              name: song.name,
              artists: song.artists.map((artist) => {
                return artist.name;
              }),
              albumCover: song.album.images[1].url,
            };
          });
          setRecommendedSongs(tracks);
        })

        .catch((error) => {
          console.error("Request Error: ", error);
        });
    }
  }, [token]);

  return (
    <main className="absolute inset-0 flex flex-col overflow-hidden">
      <Header token={token} />
      <div className="flex-1 flex items-center justify-center">
        {token.length > 0 ? (
          <div className="space-y-6 w-full h-full flex flex-col items-center justify-center">
            <div className="absolute right-0 bg-gradient-to-l from-green-500 to-transparent w-10 h-full rounded-l-2xl" />
            <div className="absolute left-0 bg-gradient-to-r from-red-500 to-transparent w-10 h-full rounded-r-2xl" />
            <div className="flex items-center gap-4">
              <DislikeButton />
              <div className="stack">
                <AlbumCard
                  swipe={swipe}
                  name={recommendedSongs[0].name}
                  artists={recommendedSongs[0].artists}
                  albumCover={recommendedSongs[0].albumCover}
                />
                <AlbumCard
                  swipe={swipe}
                  name={recommendedSongs[1].name}
                  artists={recommendedSongs[1].artists}
                  albumCover={recommendedSongs[1].albumCover}
                />
              </div>
              <LikeButton />
            </div>
            <div className="flex w-full space-x-4 items-center justify-center mt-2">
              <PlayButton />
            </div>
          </div>
        ) : (
          <div className="flex items-center flex-col gap-6">
            <p className="w-full text-center font-bold">
              Please log in with a Spotify Premium account to continue.
            </p>
            <LoginButton />
          </div>
        )}
      </div>
    </main>
  );
}
